#!/usr/bin/env php
<?php

class Colors
{
    private $foreground = [
        'black' => '0;30',
        'dark-gray' => '1;30',
        'blue' => '0;34',
        'light-blue' => '1;34',
        'green' => '0;32',
        'light-green' => '1;32',
        'cyan' => '0;36',
        'light-cyan' => '1;36',
        'red' => '0;31',
        'light-red' => '1;31',
        'purple' => '0;35',
        'light-purple' => '1;35',
        'brown' => '0;33',
        'yellow' => '1;33',
        'light-gray' => '0;37',
        'white' => '1;37'
    ];

    public function fill($string, $foreground = null)
    {
        if ($this->foreground[$foreground] ?? null) {
            $string = "\033[" . $this->foreground[$foreground] . "m" . $string . "\033[0m";
        } else {
            $string = "\033[0;00m" . $string . "\033[0m";
        }

        return $string;
    }
}

class DockerImages
{
    private $colors;
    private $output = [];
    private $rows = [];
    private $lengths = [31];
    private $format;

    public function __construct(Colors $colors)
    {
        $this->colors = $colors;
    }

    protected function exec()
    {
        $args = implode(' ', array_slice($_SERVER['argv'], 1));
        exec('docker images ' . $args, $this->output);
        if (!$this->output) {
            exit(1);
        }
    }

    protected function parseOutput()
    {
        foreach ($this->output as $line) {
            $this->rows[] = $row = preg_split('/\s{2,}/', $line);

            $length = strlen($row[0]);

            if ($this->lengths[0] < $length) {
                $this->lengths[0] = $length;
            }
        }
    }

    protected function prepareFormat()
    {
        $length = $this->lengths[0] + 11;

        $this->format = "%-{$length}.{$length}s %-30.30s %-30.30s %-30.30s %-30.30s" . PHP_EOL;
    }

    protected function printHeader()
    {
        $header = array_map(function ($col) {
            return $this->colors->fill($col, 'light-blue');
        }, $this->rows[0]);

        echo sprintf($this->format, ...$header);
    }

    protected function printContent()
    {
        foreach ($this->rows as $key => $row) {
            if ($key == 0) {
                continue;
            }

            $row[0] = $this->colors->fill($row[0], $this->contains($row[0], '/') ? 'dark-gray' : 'white');
            $row[1] = $this->colors->fill($row[1], $row[1] == 'latest' ? 'light-green' : null);
            $row[2] = $this->colors->fill($row[2], 'dark-gray');

            $color = $this->contains($row[3], ['days', 'weeks']) ? 'green' : null;
            $color = $this->contains($row[3], 'months') ? 'brown' : $color;
            $color = $this->contains($row[3], 'years') ? 'red' : $color;
            $row[3] = $this->colors->fill($row[3], $color);

            $color = $this->contains($row[4], 'GB') ? 'red' : null;
            $color = $this->contains($row[4], 'MB') && intval($row[4] >= 500) ? 'brown' : $color;
            $row[4] = $this->colors->fill($row[4], $color);

            echo sprintf($this->format, ...$row);
        }
    }

    protected function contains($haystack, $needle)
    {
        if (is_array($needle)) {
            foreach ($needle as $value) {
                if ($this->contains($haystack, $value)) {
                    return true;
                }
            }
            return false;
        }

        return strpos($haystack, $needle) !== false;
    }

    public function call()
    {
        $this->exec();
        $this->parseOutput();
        $this->prepareFormat();
        $this->printHeader();
        $this->printContent();
    }
}

(new DockerImages(new Colors()))->call();

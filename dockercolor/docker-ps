#!/usr/bin/env php
<?php

class Colors
{
    private $foreground = [
        'black' => '0;30',
        'dark-gray' => '1;30',
        'blue' => '0;34',
        'light-blue' => '1;34',
        'green' => '0;32',
        'light-green' => '1;32',
        'cyan' => '0;36',
        'light-cyan' => '1;36',
        'red' => '0;31',
        'light-red' => '1;31',
        'purple' => '0;35',
        'light-purple' => '1;35',
        'brown' => '0;33',
        'yellow' => '1;33',
        'light-gray' => '0;37',
        'white' => '1;37'
    ];

    public function fill($string, $foreground = null)
    {
        if ($this->foreground[$foreground] ?? null) {
            $string = "\033[" . $this->foreground[$foreground] . "m" . $string . "\033[0m";
        }

        return $string;
    }
}

class DockerPs
{
    private $colors;
    private $output = [];
    private $rows = [];
    private $lengths = [];

    private $minColumnLength = 17;
    private $separatorLength = 3;

    public function __construct(Colors $colors)
    {
        $this->colors = $colors;
    }

    protected function exec()
    {
        $args = implode(' ', array_slice($_SERVER['argv'], 1));
        exec('docker ps ' . $args, $this->output);
        if (!$this->output) {
            exit(1);
        }
    }

    protected function parseOutput()
    {
        foreach ($this->output as $line) {
            $row = preg_split('/\s{2,}/', trim($line));

            // If ports are empty
            if (count($row) <= 6) {
                $row[6] = $row[5];
                $row[5] = '';
            }

            $this->calculateLengths($row);

            $this->rows[] = $row;
        }
    }

    protected function calculateLengths(array $row)
    {
        foreach ($row as $key => $col) {
            if (!array_key_exists($key, $this->lengths)) {
                $this->lengths[$key] = $this->minColumnLength;
            }

            $length = strlen($col);

            if ($this->contains($col, 'â€¦')) {
                $length -= 2;
            }

            if (($this->lengths[$key]) < $length) {
                $this->lengths[$key] = $length;
            }
        }
    }

    protected function printRow(array $row)
    {
        foreach ($row as $key => $col) {
            $dirtyLength = substr_count($col, "\033[") / 2 * 11;
            $rawLength = strlen($col) - $dirtyLength;
            $len = $rawLength < $this->lengths[$key] ? $this->lengths[$key] : $rawLength;
            $len += $dirtyLength;
            echo str_pad($col, $len + $this->separatorLength);
        }
        echo PHP_EOL;
    }

    protected function printHeader()
    {
        $row = array_map(function ($col) {
            return $this->colors->fill($col, 'light-blue');
        }, $this->rows[0]);

        $this->printRow($row);
    }

    protected function printContent()
    {
        foreach ($this->rows as $key => $row) {
            if ($key == 0) {
                continue;
            }

            // Container column
            $row[0] = $this->colors->fill($row[0], 'dark-gray');

            // Image column
            if ($this->contains($row[1], ':')) {
                $parts = explode(':', $row[1]);
                $row[1] = $this->colors->fill($parts[0], 'yellow');
                $row[1] .= $this->colors->fill(':' . $parts[1], 'light-green');
            } else {
                $row[1] = $this->colors->fill($row[1], 'yellow');
            }

            // Command column
            $row[2] = $this->colors->fill($row[2], 'dark-gray');

            // Created column
            $color = $this->contains($row[4], ['second', 'minute', 'hour']) ? 'green' : null;
            $color = $this->contains($row[4], 'days') ? 'brown' : $color;
            $color = $this->contains($row[4], 'months') ? 'red' : $color;
            $row[3] = $this->colors->fill($row[3], $color);

            // Status column
            $row[4] = $this->colors->fill($row[4], $this->contains($row[4], 'Exited') ? 'red' : 'light-green');

            // Ports column
            if ($row[5]) {
                $arr = [];
                foreach (explode(',', $row[5]) as $part) {
                    $part = trim($part);
                    if ($this->contains($part, '->')) {
                        $ports = explode('->', $part);
                        $arr[] = $this->colors->fill($ports[0], 'light-cyan') . '->' . $ports[1];
                    } else {
                        $arr[] = $part;
                    }
                }
                $row[5] = implode(', ', $arr);
            }

            // Names column
            $row[6] = $this->colors->fill($row[6], 'white');

            $this->printRow($row);
        }
    }

    protected function contains($haystack, $needle)
    {
        if (is_array($needle)) {
            foreach ($needle as $value) {
                if ($this->contains($haystack, $value)) {
                    return true;
                }
            }
            return false;
        }

        return strpos($haystack, $needle) !== false;
    }

    public function call()
    {
        $this->exec();
        $this->parseOutput();
        $this->printHeader();
        $this->printContent();
    }
}

(new DockerPs(new Colors()))->call();
